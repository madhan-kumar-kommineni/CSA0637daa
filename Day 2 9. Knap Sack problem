#include <stdio.h>
#include <stdlib.h>
struct Item {
    int value;
    int weight;
};
int compare(const void *a, const void *b) {
    double ratio1 = (double)(((struct Item *)a)->value) / (((struct Item *)a)->weight);
    double ratio2 = (double)(((struct Item *)b)->value) / (((struct Item *)b)->weight);
    return ratio2 > ratio1 ? 1 : -1; // Sort in non-increasing order of value-to-weight ratio
}
double fractionalKnapsack(int capacity, struct Item items[], int n) {
    qsort(items, n, sizeof(items[0]), compare);

    double totalValue = 0.0; 
    for (int i = 0; i < n; i++) {
        if (items[i].weight <= capacity) {
            totalValue += items[i].value;
            capacity -= items[i].weight;
        }
        else {
            totalValue += (double)items[i].value * capacity / items[i].weight;
            break;
        }
    }

    return totalValue;
}

int main() {
    struct Item items[] = {{60, 10}, {100, 20}, {120, 30}}; // Each item has value and weight
    int n = sizeof(items) / sizeof(items[0]); // Number of items
    int capacity = 50; // Knapsack capacity

    double maxValue = fractionalKnapsack(capacity, items, n);

    printf("Maximum value in the knapsack: %.2f\n", maxValue);

    return 0;
}
